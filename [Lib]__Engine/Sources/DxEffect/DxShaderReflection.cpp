#include "pch.h"

#include "./DxEffectRiver.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

//	Note : 정적 변수 생성.
//
LPDIRECT3DVERTEXSHADER9 	DxEffectRiver::m_pReflectVS = NULL;
LPDIRECT3DVERTEXSHADER9 	DxEffectRiver::m_pOceanWaterVS = NULL;
LPDIRECT3DPIXELSHADER9 		DxEffectRiver::m_pOceanWaterPS = NULL;
LPDIRECT3DVERTEXSHADER9 	DxEffectRiver::m_pRiverVS = NULL;
LPDIRECT3DPIXELSHADER9		DxEffectRiver::m_pRiverPS = NULL;

LPDIRECT3DVERTEXDECLARATION9	DxEffectRiver::m_pReflectDCRT = NULL;
LPDIRECT3DVERTEXDECLARATION9	DxEffectRiver::m_pRiverDCRT = NULL;

/*
//	Note : 
//
char DxEffectRiver::m_strEffRiver[] =
{
	vs_1_1
    dcl_position v0
    dcl_color v5
    dcl_texcoord v7
    m4x4 oPos, v0, c22
    mov oD0, v5
    mov oT0, v7
    dp4 oT1.x, v0, c35
    dp4 oT1.y, v0, c36
    dp4 oT1.z, v0, c37
    dp4 oT1.w, v0, c38
};
*/

//	Note : DxEffectShadow
//
DWORD	DxEffectRiver::m_dwReflectAVS[] = 
{
	0xfffe0101, 0x0000001f, 0x80000000, 0x900f0000, 0x0000001f, 0x8000000a, 
    0x900f0005, 0x0000001f, 0x80000005, 0x900f0007, 0x00000014, 0xc00f0000, 
    0x90e40000, 0xa0e40016, 0x00000001, 0xd00f0000, 0x90e40005, 0x00000001, 
    0xe00f0000, 0x90e40007, 0x00000009, 0xe0010001, 0x90e40000, 0xa0e40023, 
    0x00000009, 0xe0020001, 0x90e40000, 0xa0e40024, 0x00000009, 0xe0040001, 
    0x90e40000, 0xa0e40025, 0x00000009, 0xe0080001, 0x90e40000, 0xa0e40026, 
    0x0000ffff

	//0xfffe0100, 0x0004fffe, 0x454c4946, 0x6e696172,	0x76766e2e, 0x00682d00, 0x0002fffe, 0x454e494c,
	//0x00000001, 0x0002fffe, 0x454e494c, 0x00000002,	0x0002fffe, 0x454e494c, 0x00000003, 0x0002fffe,
	//0x454e494c, 0x00000004, 0x0002fffe, 0x454e494c,	0x00000004, 0x00000014, 0xc00f0000, 0x90e40000,
	//0xa0e40016, 0x0002fffe, 0x454e494c, 0x00000005,	0x0002fffe, 0x454e494c, 0x00000006, 0x0002fffe,
	//0x454e494c, 0x00000007, 0x0002fffe, 0x454e494c,	0x00000007, 0x00000001, 0xd00f0000, 0x90e40005,
	//0x0002fffe, 0x454e494c, 0x00000008, 0x0002fffe,	0x454e494c, 0x00000009, 0x0002fffe, 0x454e494c,
	//0x00000009, 0x00000001, 0xe00f0000, 0x90e40007,	0x0002fffe, 0x454e494c, 0x0000000a, 0x0002fffe,
	//0x454e494c, 0x0000000b, 0x0002fffe, 0x454e494c,	0x0000000b, 0x00000009, 0xe0010001, 0x90e40000,
	//0xa0e40023, 0x0002fffe, 0x454e494c, 0x0000000c,	0x0002fffe, 0x454e494c, 0x0000000c, 0x00000009,
	//0xe0020001, 0x90e40000, 0xa0e40024, 0x0002fffe,	0x454e494c, 0x0000000d, 0x0002fffe, 0x454e494c,
	//0x0000000d, 0x00000009, 0xe0040001, 0x90e40000,	0xa0e40025, 0x0002fffe, 0x454e494c, 0x0000000e,
	//0x0002fffe, 0x454e494c, 0x0000000e, 0x00000009,	0xe0080001, 0x90e40000, 0xa0e40026, 0x0000ffff
};

/*
vs.1.1

dcl_position v0
dcl_color v5
dcl_texcoord0 v7
dcl_texcoord1 v8

m4x4 oPos, v0, c4

m4x3 r0, v0, c0

sub r2.xyz, c8, r0.xyz  	//view vector
dp3 r10.x, r2, r2
rsq r10.y, r10.x
mul r2, r2.xyz, r10.y       //normalized view vector          
mov r2.xyz, r2.xzy	//

mov oT0, v7
mov oT1, v8
mov oT2, r2		//pass in view vector (worldspace)
*/
DWORD	DxEffectRiver::m_dwOceanWaterAVS[] = 
{
	0xfffe0101, 0x0000001f, 0x80000000, 0x900f0000, 0x0000001f, 0x8000000a, 
    0x900f0005, 0x0000001f, 0x80000005, 0x900f0007, 0x0000001f, 0x80010005, 
    0x900f0008, 0x00000014, 0xc00f0000, 0x90e40000, 0xa0e40004, 0x00000015, 
    0x80070000, 0x90e40000, 0xa0e40000, 0x00000002, 0x80070002, 0xa0e40008, 
    0x81a40000, 0x00000008, 0x8001000a, 0x80e40002, 0x80e40002, 0x00000007, 
    0x8002000a, 0x8000000a, 0x00000005, 0x800f0002, 0x80a40002, 0x8055000a, 
    0x00000001, 0x80070002, 0x80580002, 0x00000001, 0xe00f0000, 0x90e40007, 
    0x00000001, 0xe00f0001, 0x90e40008, 0x00000001, 0xe00f0002, 0x80e40002, 
    0x0000ffff

	//0xfffe0101, 0x0009fffe, 0x58443344, 0x68532038,     0x72656461, 0x73734120, 0x6c626d65, 0x56207265, 
 //   0x69737265, 0x30206e6f, 0x0031392e, 0x0005fffe,     0x454c4946, 0x6165634f, 0x7461576e, 0x762e7265, 
 //   0x00006873, 0x0002fffe, 0x454e494c, 0x00000003,     0x00000014, 0xc00f0000, 0x90e40000, 0xa0e40004, 
 //   0x0002fffe, 0x454e494c, 0x00000005, 0x00000015,     0x800f0000, 0x90e40000, 0xa0e40000, 0x0002fffe, 
 //   0x454e494c, 0x00000007, 0x00000002, 0x800f0002,     0xa0e40008, 0x81e40000, 0x0002fffe, 0x454e494c, 
 //   0x00000008, 0x00000008, 0x8001000a, 0x80e40002,     0x80e40002, 0x0002fffe, 0x454e494c, 0x00000009, 
 //   0x00000007, 0x8002000a, 0x8000000a, 0x0002fffe,     0x454e494c, 0x0000000a, 0x00000005, 0x800f0002, 
 //   0x80e40002, 0x8055000a, 0x0002fffe, 0x454e494c,     0x0000000b, 0x00000001, 0x80070002, 0x80580002, 
 //   0x0002fffe, 0x454e494c, 0x0000000d, 0x00000001,     0xe00f0000, 0x90e40007, 0x0002fffe, 0x454e494c, 
 //   0x0000000e, 0x00000001, 0xe00f0001, 0x90e40008,     0x0002fffe, 0x454e494c, 0x0000000f, 0x00000001, 
 //   0xe00f0002, 0x80e40002, 0x0000ffff
};

/*
ps.1.4

texld r0, t0
texld r1, t1
texcrd r2.rgb, t2

	add_d2 r0, r0_bx2, r1_bx2
	mov r1, r0

	//add_d2 r2.rgb, r2, c1

	dp3 r0.rgb, r1, r2
	mad r2.rgb, r1, r0_x2, -r2     //R = 2N(V.N)-V

	mov_sat r1, r0

phase
texld r2, r2                   //cubic env map   
texld r3, r1                   //Index fresnel map using 2*V.N

   	mul r2.a, r2.g, r2.g           //use green channel of env map as specular          

    mul r2.rgb, r2, 1-r0.r         //Fresnel Term 
    +mul r2.a, r2.a, r2.a          //Specular highlight ^4

    add_d2_sat r2.rgb, r2, r3_x2   //+= Water color
    +mul r2.a, r2.a, r2.a          //Specular highlight ^8

    mad_sat r0, r2.a, c2, r2       //+= Specular highlight * highlight color
*/
DWORD	DxEffectRiver::m_dwOceanWaterAPS[] =
{
	//0xffff0104, 0x0009fffe, 0x58443344, 0x68532038,     0x72656461, 0x73734120, 0x6c626d65, 0x56207265, 
 //   0x69737265, 0x30206e6f, 0x0031392e, 0x0005fffe,     0x454c4946, 0x6165634f, 0x7461576e, 0x702e7265, 
 //   0x00006873, 0x0002fffe, 0x454e494c, 0x00000003,     0x00000042, 0x800f0000, 0xb0e40000, 0x0002fffe, 
 //   0x454e494c, 0x00000004, 0x00000042, 0x800f0001,     0xb0e40001, 0x0002fffe, 0x454e494c, 0x00000005, 
 //   0x00000040, 0x80070002, 0xb0e40002, 0x0002fffe,     0x454e494c, 0x00000007, 0x00000002, 0x8f0f0000, 
 //   0x84e40000, 0x84e40001, 0x0002fffe, 0x454e494c,     0x00000008, 0x00000001, 0x800f0001, 0x80e40000, 
 //   0x0002fffe, 0x454e494c, 0x0000000c, 0x00000008,     0x80070000, 0x80e40001, 0x80e40002, 0x0002fffe, 
 //   0x454e494c, 0x0000000d, 0x00000004, 0x80070002,     0x80e40001, 0x87e40000, 0x81e40002, 0x0002fffe, 
 //   0x454e494c, 0x0000000f, 0x00000001, 0x801f0001,     0x80e40000, 0x0002fffe, 0x454e494c, 0x00000011, 
 //   0x0000fffd, 0x0002fffe, 0x454e494c, 0x00000012,     0x00000042, 0x800f0002, 0x80e40002, 0x0002fffe, 
 //   0x454e494c, 0x00000013, 0x00000042, 0x800f0003,     0x80e40001, 0x0002fffe, 0x454e494c, 0x00000015, 
 //   0x00000005, 0x80080002, 0x80550002, 0x80550002,     0x0002fffe, 0x454e494c, 0x00000017, 0x00000005, 
 //   0x80070002, 0x80e40002, 0x86000000, 0x0002fffe,     0x454e494c, 0x00000018, 0x40000005, 0x80080002, 
 //   0x80ff0002, 0x80ff0002, 0x0002fffe, 0x454e494c,     0x0000001a, 0x00000002, 0x8f170002, 0x80e40002, 
 //   0x87e40003, 0x0002fffe, 0x454e494c, 0x0000001b,     0x40000005, 0x80080002, 0x80ff0002, 0x80ff0002, 
 //   0x0002fffe, 0x454e494c, 0x0000001d, 0x00000004,     0x801f0000, 0x80ff0002, 0xa0e40002, 0x80e40002, 
 //   0x0000ffff

	0xffff0104, 0x00000042, 0x800f0000, 0xb0e40000, 0x00000042, 0x800f0001, 
    0xb0e40001, 0x00000040, 0x80070002, 0xb0e40002, 0x00000002, 0x8f0f0000, 
    0x84e40000, 0x84e40001, 0x00000001, 0x800f0001, 0x80e40000, 0x00000008, 
    0x80070000, 0x80e40001, 0x80e40002, 0x00000004, 0x80070002, 0x80e40001, 
    0x87e40000, 0x81e40002, 0x00000001, 0x801f0001, 0x80e40000, 0x0000fffd, 
    0x00000042, 0x800f0002, 0x80e40002, 0x00000042, 0x800f0003, 0x80e40001, 
    0x00000005, 0x80080002, 0x80550002, 0x80550002, 0x00000005, 0x80070002, 
    0x80e40002, 0x86000000, 0x40000005, 0x80080002, 0x80ff0002, 0x80ff0002, 
    0x00000002, 0x8f170002, 0x80e40002, 0x87e40003, 0x40000005, 0x80080002, 
    0x80ff0002, 0x80ff0002, 0x00000004, 0x801f0000, 0x80ff0002, 0xa0e40002, 
    0x80e40002, 0x0000ffff
};

/*
vs.1.1

dcl_position v0
dcl_color v5
dcl_texcoord0 v7
dcl_texcoord1 v8

m4x4 oPos, v0, c4

mov oT0, v7
mov oT1, v8

dp4 oT2.x, v0, c29
dp4 oT2.y, v0, c30
dp4 oT2.z, v0, c31
dp4 oT2.w, v0, c32

m4x3 r0, v0, c0

sub r2, c8, r0.xyz  	//view vector
dp3 r10.x, r2, r2
rsq r10.y, r10.x
mul r2, r2, r10.y       //normalized view vector          
mov r2.xyz, r2.xzy	//

mov oT3, r2		// 시선벡터
*/

DWORD	DxEffectRiver::m_dwRiverAVS[] =
{
	//0xfffe0101, 0x0004fffe, 0x454c4946, 0x6c666552,	0x2e746365, 0x00687376, 0x0002fffe, 0x454e494c,
	//0x00000001, 0x0002fffe, 0x454e494c, 0x00000002,	0x0002fffe, 0x454e494c, 0x00000003, 0x0002fffe,
	//0x454e494c, 0x00000003, 0x00000014, 0xc00f0000,	0x90e40000, 0xa0e40004, 0x0002fffe, 0x454e494c,
	//0x00000004, 0x0002fffe, 0x454e494c, 0x00000005,	0x0002fffe, 0x454e494c, 0x00000005, 0x00000001,
	//0xe00f0000, 0x90e40007, 0x0002fffe, 0x454e494c,	0x00000006, 0x0002fffe, 0x454e494c, 0x00000006,
	//0x00000001, 0xe00f0001, 0x90e40008, 0x0002fffe,	0x454e494c, 0x00000007, 0x0002fffe, 0x454e494c,
	//0x00000008, 0x0002fffe, 0x454e494c, 0x00000008,	0x00000009, 0xe0010002, 0x90e40000, 0xa0e4001d,
	//0x0002fffe, 0x454e494c, 0x00000009, 0x0002fffe,	0x454e494c, 0x00000009, 0x00000009, 0xe0020002,
	//0x90e40000, 0xa0e4001e, 0x0002fffe, 0x454e494c,	0x0000000a, 0x0002fffe, 0x454e494c, 0x0000000a,
	//0x00000009, 0xe0040002, 0x90e40000, 0xa0e4001f,	0x0002fffe, 0x454e494c, 0x0000000b, 0x0002fffe,
	//0x454e494c, 0x0000000b, 0x00000009, 0xe0080002,	0x90e40000, 0xa0e40020, 0x0002fffe, 0x454e494c,
	//0x0000000c, 0x0002fffe, 0x454e494c, 0x0000000d,	0x0002fffe, 0x454e494c, 0x0000000d, 0x00000015,
	//0x800f0000, 0x90e40000, 0xa0e40000, 0x0002fffe,	0x454e494c, 0x0000000e, 0x0002fffe, 0x454e494c,
	//0x0000000f, 0x0002fffe, 0x454e494c, 0x0000000f,	0x00000002, 0x800f0002, 0xa0e40008, 0x81e40000,
	//0x0002fffe, 0x454e494c, 0x00000010, 0x0002fffe,	0x454e494c, 0x00000010, 0x00000008, 0x8001000a,
	//0x80e40002, 0x80e40002, 0x0002fffe, 0x454e494c,	0x00000011, 0x0002fffe, 0x454e494c, 0x00000011,
	//0x00000007, 0x8002000a, 0x8000000a, 0x0002fffe,	0x454e494c, 0x00000012, 0x0002fffe, 0x454e494c,
	//0x00000012, 0x00000005, 0x800f0002, 0x80e40002,	0x8055000a, 0x0002fffe, 0x454e494c, 0x00000013,
	//0x0002fffe, 0x454e494c, 0x00000013, 0x00000001,	0x80070002, 0x80580002, 0x0002fffe, 0x454e494c,
	//0x00000014, 0x0002fffe, 0x454e494c, 0x00000015,	0x0002fffe, 0x454e494c, 0x00000015, 0x00000001,
	//0xe00f0003, 0x80e40002, 0x0000ffff

	0xfffe0101, 0x0000001f, 0x80000000, 0x900f0000, 0x0000001f, 0x8000000a, 
    0x900f0005, 0x0000001f, 0x80000005, 0x900f0007, 0x0000001f, 0x80010005, 
    0x900f0008, 0x00000014, 0xc00f0000, 0x90e40000, 0xa0e40004, 0x00000001, 
    0xe00f0000, 0x90e40007, 0x00000001, 0xe00f0001, 0x90e40008, 0x00000009, 
    0xe0010002, 0x90e40000, 0xa0e4001d, 0x00000009, 0xe0020002, 0x90e40000, 
    0xa0e4001e, 0x00000009, 0xe0040002, 0x90e40000, 0xa0e4001f, 0x00000009, 
    0xe0080002, 0x90e40000, 0xa0e40020, 0x00000015, 0x80070000, 0x90e40000, 
    0xa0e40000, 0x00000002, 0x800f0002, 0xa0e40008, 0x81a40000, 0x00000008, 
    0x8001000a, 0x80e40002, 0x80e40002, 0x00000007, 0x8002000a, 0x8000000a, 
    0x00000005, 0x800f0002, 0x80e40002, 0x8055000a, 0x00000001, 0x80070002, 
    0x80580002, 0x00000001, 0xe00f0003, 0x80e40002, 0x0000ffff
};

/*
ps.1.4

texld r0, t0
texld r1, t1
texcrd r2.rg, t2_dw.xyw
texcrd r3.rgb, t3

	add_d2 r1, r0_bx2, r1_bx2

	dp3 r0.r, r3, r1		// 시선벡터
	add_d2 r0.r, r0.r, c3.x

	mad_sat r4.rg, r1, c1, r2	// 반사를 섭동
	mov r4.b, c0.z			// 1.f 를 넣는다.

phase
texld r2, r4                   //Reflect

   	mul r2.a, r2.g, r2.g          	//use green channel of env map as specular          
    	mul r2.a, r2.a, r2.a          	//Specular highlight ^4

	add_sat r0.r, r0.r, r2.a

    	mul r0.rgb, r2, r0.r	//, r2.a     	//Fresnel Term 
	add_sat r0.a, r2.a, c0.z
*/

DWORD	DxEffectRiver::m_dwRiverAPS[] =
{
	0xffff0104, 0x00000042, 0x800f0000, 0xb0e40000, 0x00000042, 0x800f0001, 
    0xb0e40001, 0x00000040, 0x80030002, 0xbaf40002, 0x00000040, 0x80070003, 
    0xb0e40003, 0x00000002, 0x8f0f0001, 0x84e40000, 0x84e40001, 0x00000008, 
    0x80010000, 0x80e40003, 0x80e40001, 0x00000002, 0x8f010000, 0x80000000, 
    0xa0000003, 0x00000004, 0x80130004, 0x80e40001, 0xa0e40001, 0x80e40002, 
    0x00000001, 0x80040004, 0xa0aa0000, 0x0000fffd, 0x00000042, 0x800f0002, 
    0x80e40004, 0x00000005, 0x80080002, 0x80550002, 0x80550002, 0x00000005, 
    0x80080002, 0x80ff0002, 0x80ff0002, 0x00000002, 0x80110000, 0x80000000, 
    0x80ff0002, 0x00000005, 0x80070000, 0x80e40002, 0x80000000, 0x00000002, 
    0x80180000, 0x80ff0002, 0xa0aa0000, 0x0000ffff
};

// 그외 테스트
/*
ps.1.4

texld r0, t0
texld r1, t1
texcrd r2.rgb, t2

add_d2 r0, r0, r1

add_d2 r2.rgb, r2, c1

dp3 r0, r0_bx2, r2_bx2

mul r0, r0, r0
mul r0, r0, r0
mul r0, r0, r0
mul r0, r0, r0
*/

/*
ps.1.4

texld r0, t0
texld r1, t1
texcrd r2.rgb, t2

	add_d2 r0, r0_bx2, r1_bx2
	mov r1, r0

	//add_d2 r2.rgb, r2, c1

	dp3_sat r0.rgb, r1, r2
	mad r2.rgb, r1, r0_x2, -r2     //R = 2N(V.N)-V

	mov_sat r1, r0

phase
texld r2, r2                   //cubic env map   
texld r3, r1                   //Index fresnel map using 2*V.N

// 	mul r2.a, r0.g, r0.g           //use green channel of env map as specular
//	mul r2.a, r2.a, r2.a
//	mul r2.a, r2.a, r2.a
//	mul r2.a, r2.a, r2.a

//	mad_sat r0, r2.a, c2, r3_x2

	mul r2.rgb, r2, r2             //Square the environment map
   	+mul r2.a, r2.g, r2.g           //use green channel of env map as specular          

    mul r2.rgb, r2, 1-r0.r         //Fresnel Term 
    +mul r2.a, r2.a, r2.a          //Specular highlight ^4

    add_d4_sat r2.rgb, r2, r3_x2   //+= Water color
    +mul r2.a, r2.a, r2.a          //Specular highlight ^8

    mad_sat r0, r2.a, c2, r2       //+= Specular highlight * highlight color
*/