#include "pch.h"

#include "./DxSkinMesh9.h"
#include "./DxEffectDot3.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

//	Note : 정적 변수 생성.
//
DWORD	DxEffectDot3::m_dwEffect;

/*
		vs.1.0

	//;--------------------------------------------------------------
	//;	Vertex 가 World*View*Projection 에 적용, 뿌려짐
	m4x4 oPos, v0, c22

	//;--------------------------------------------------------------------  
	//;	Normal 벡터를 얻어와서 단위 벡터로 만듬	------ r0 에 등록

	//	; Normal 벡터를 World 행렬로 변환
	m3x3 r0, v3, c10

	//	; 변환된 것을 단위 벡터로 만드는 작업
	dp3 r0.w, r0, r0
	rsq r0.w, r0.w	
	mul r0, r0, r0.w

	//;-------------------------------------------------------------------- 
	//;		Diffuse 칼라를 생성	Direction

	//; The directional light source.
	dp3 r4.x, r0, -c0	

	mul r5, r4.x, c1		//	빛 디퓨즈 와 각도
	mul r1, r5, c26			//	빛 디퓨즈 와 각도 & 매트리얼 디퓨즈
	max r1.xyz, r1.xyz, c28.x	
	add r1.xyz, r1.xyz, c27		//	빛 디퓨즈 와 각도 & 매트리얼 디퓨즈 & 엠뷰언트

	mov oD0, r1	

	//;Here we set the diffuse alpha component
	mov oD0.w, c29.y


	//; Set texture coord
	mov oT0, v7
	mov oT1, v7
	mov oT2, v7



	; *************** Light 1 ************************
	; Calculate vector from vertex to light in eye space
	add R_VERTEX_TO_LIGHT, c[CV_LIGHT1_POSITION],-R_EYE_VERTEX
	dp3 R_TEMP.w, R_VERTEX_TO_LIGHT, R_VERTEX_TO_LIGHT    
	rsq R_VERTEX_TO_LIGHT.w, R_TEMP.w

	; Get the attenuation
	dst R_TEMP, R_TEMP.wwww, R_VERTEX_TO_LIGHT.wwww        ; (1, d, d*d, 1/d)
	dp3 R_TEMP.w, R_TEMP, c[CV_LIGHT1_ATTENUATION]        ; (a0 + a1*d + a2*d2)
	rcp r8.w, R_TEMP.w                                    ; 1 / (a0 + a1*d + a2*d)    

	; Normalize the vertex to the light vector
	mul R_VERTEX_TO_LIGHT, R_VERTEX_TO_LIGHT, R_VERTEX_TO_LIGHT.w

	; Dot normal with light vector (from vertex to light)
	; This is the intensity of the diffuse component
	dp3 r4.x, R_EYE_NORMAL, R_VERTEX_TO_LIGHT

	; Calculate half-vector (light vector + eye vector)
	; This is used for the specular component
	add r2, r3, R_VERTEX_TO_LIGHT

	; Normalize the half-vector
	dp3 r2.w, r2, r2
	rsq r2.w, r2.w
	mul r2, r2, r2.w

	; Dot normal with half-vector
	; This is the intensity of the specular component
	dp3 r4.yz, r2, R_EYE_NORMAL

	; Calculate the diffuse & specular factors
	lit r5, r4

	; Scale the factors by the attenuation
	mul r5, r5, r8.w

	; add the (ambient color * ambient light color)
	mov R_DIFFUSE, c[CV_LIGHT1_AMBIENT]

	; add the (diffuse color * diffuse light color * diffuse intensity(r5.y))
	mad R_DIFFUSE, c[CV_LIGHT1_DIFFUSE], r5.y, R_DIFFUSE

	; add the (specular color * specular light color * specular intensity(r5.z))
	; result into the output color
	mul R_SPECULAR, c[CV_LIGHT1_SPECULAR], r5.z

*/
//DWORD	DxSkinMesh::m_dwSkinMeshVS;				// Shader 용
//
//DWORD DxSkinMesh::dwSkinMeshVS[] = {
//	0xfffe0101, 0x0003fffe, 0x454c4946, 0x6e2e3232,
//	0x00007676, 0x0002fffe, 0x454e494c, 0x00000001,
//	0x0002fffe, 0x454e494c, 0x00000002, 0x0002fffe,
//	0x454e494c, 0x00000003, 0x0002fffe, 0x454e494c,
//	0x00000004, 0x0002fffe, 0x454e494c, 0x00000005,
//	0x0002fffe, 0x454e494c, 0x00000006, 0x0002fffe,
//	0x454e494c, 0x00000007, 0x0002fffe, 0x454e494c,
//	0x00000008, 0x0002fffe, 0x454e494c, 0x00000009,
//	0x0002fffe, 0x454e494c, 0x0000000a, 0x0002fffe,
//	0x454e494c, 0x0000000b, 0x0002fffe, 0x454e494c,
//	0x0000000c, 0x0002fffe, 0x454e494c, 0x0000000d,
//	0x0002fffe, 0x454e494c, 0x0000000e, 0x0002fffe,
//	0x454e494c, 0x0000000f, 0x0002fffe, 0x454e494c,
//	0x00000010, 0x0002fffe, 0x454e494c, 0x00000011,
//	0x0002fffe, 0x454e494c, 0x00000012, 0x0002fffe,
//	0x454e494c, 0x00000013, 0x0002fffe, 0x454e494c,
//	0x00000014, 0x0002fffe, 0x454e494c, 0x00000015,
//	0x0002fffe, 0x454e494c, 0x00000016, 0x0002fffe,
//	0x454e494c, 0x00000017, 0x0002fffe, 0x454e494c,
//	0x00000018, 0x0002fffe, 0x454e494c, 0x00000019,
//	0x0002fffe, 0x454e494c, 0x0000001a, 0x0002fffe,
//	0x454e494c, 0x0000001b, 0x0002fffe, 0x454e494c,
//	0x0000001b, 0x00000001, 0xe0030000, 0x90040007,
//	0x0002fffe, 0x454e494c, 0x0000001c, 0x0002fffe,
//	0x454e494c, 0x0000001c, 0x00000001, 0xe0030001,
//	0x90e40007, 0x0002fffe, 0x454e494c, 0x0000001d,
//	0x0002fffe, 0x454e494c, 0x0000001e, 0x0002fffe,
//	0x454e494c, 0x0000001e, 0x00000017, 0x800f0000,
//	0x90e40003, 0xa0e4000a, 0x0002fffe, 0x454e494c,
//	0x0000001f, 0x0002fffe, 0x454e494c, 0x0000001f,
//	0x00000004, 0xd0070000, 0xa055001c, 0x80a40000,
//	0xa055001c, 0x0002fffe, 0x454e494c, 0x00000020,
//	0x0002fffe, 0x454e494c, 0x00000021, 0x0002fffe,
//	0x454e494c, 0x00000021, 0x00000002, 0x800e0000,
//	0xa0900008, 0x91900000, 0x0002fffe, 0x454e494c,
//	0x00000022, 0x0002fffe, 0x454e494c, 0x00000022,
//	0x00000008, 0x80010000, 0x80f90000, 0x80f90000,
//	0x0002fffe, 0x454e494c, 0x00000023, 0x0002fffe,
//	0x454e494c, 0x00000023, 0x00000007, 0x80010000,
//	0x80000000, 0x0002fffe, 0x454e494c, 0x00000024,
//	0x0002fffe, 0x454e494c, 0x00000024, 0x00000004,
//	0x800e0000, 0x80000000, 0x80e50000, 0xa0900000,
//	0x0002fffe, 0x454e494c, 0x00000025, 0x0002fffe,
//	0x454e494c, 0x00000025, 0x00000008, 0x80010000,
//	0x80f90000, 0x80f90000, 0x0002fffe, 0x454e494c,
//	0x00000026, 0x0002fffe, 0x454e494c, 0x00000026,
//	0x00000007, 0x80010000, 0x80000000, 0x0002fffe,
//	0x454e494c, 0x00000027, 0x0002fffe, 0x454e494c,
//	0x00000027, 0x00000005, 0x80070001, 0x80000000,
//	0x80f90000, 0x0002fffe, 0x454e494c, 0x00000028,
//	0x0002fffe, 0x454e494c, 0x00000029, 0x0002fffe,
//	0x454e494c, 0x00000029, 0x00000017, 0x800f0000,
//	0x80e40001, 0xa0e4000a, 0x0002fffe, 0x454e494c,
//	0x0000002a, 0x0002fffe, 0x454e494c, 0x0000002a,
//	0x00000004, 0xd0070001, 0xa055001c, 0x80a40000,
//	0xa055001c, 0x0002fffe, 0x454e494c, 0x0000002b,
//	0x0002fffe, 0x454e494c, 0x0000002c, 0x0002fffe,
//	0x454e494c, 0x0000002c, 0x00000014, 0xc00f0000,
//	0x90e40000, 0xa0e40016, 0x0002fffe, 0x454e494c,
//	0x0000002d, 0x0002fffe, 0x454e494c, 0x0000002e,
//	0x0002fffe, 0x454e494c, 0x0000002f, 0x0000ffff
//};

/*
char DxEffectDot3::m_strEffect[] =
{
	"vs.1.0	\n" //

	//;--------------------------------------------------------------
	//;	Vertex 가 World*View*Projection 에 적용, 뿌려짐
	"mov r0, v0				\n"
	"mul r1, v3, c28.x		\n"
	"add r0.xyz, r0, r1		\n"
	"m4x4 oPos, r0, c22		\n"

	//;---------------------------------------------------------------
	//;	노멀벡터를 와 빛(Light)벡터의 내적으로 Diffuse 칼라를 얻어옴

	// S 벡터를 월드 좌표로 옮김
	"m3x3 r0, v3, c10	\n"

	// 단위 벡터로 만든다.
	"dp3 r0.w, r0, r0	\n"
	"rsq r0.w, r0.w		\n"	
	"mul r0, r0, r0.w	\n"

	//;compute world space position
	"m4x3 r1, v0, c10	;\n"
	"mov r1.w, v0.w		;\n"

	//;vector from point to eye
	"add r2, c8, -r1	;\n" //

	//;normalize e
	"dp3 r2.w, r2, r2	;\n" //
	"rsq r2.w, r2.w		;\n" //
	"mul r2, r2, r2.w	;\n" //


	//;-------------------------------------------------------------------- 
	//;		Diffuse 칼라를 생성
	
	//; The directional light source.
	"dp3 r4.x, r0, -c0		\n" //

	"mul r5, r4.x, c1		\n" //	빛 디퓨즈 와 각도
	"mul r1, r5, c26		\n" //	빛 디퓨즈 와 각도 & 매트리얼 디퓨즈
	"max r1.xyz, r1.xyz, c28.x	\n"
	"add r1.xyz, r1.xyz, c27		\n" //	빛 디퓨즈 와 각도 & 매트리얼 디퓨즈 & 엠뷰언트

	//	Note : 스페큘러 시작.
	//
	"dp3 r2, v0, c10	\n"
	// 카메라에서 점까지
	"add r2, -r2, c8	\n"
	"dp3 r2.w, r2, r2	\n" 
	"rsq r2.w, r2.w		\n" 
	"mul r2, r2, r2.w	\n" 

	// 위에 구한 값과 빛을 더해서 값을 얻는다.		Half
	"add r2, r2, -c0	\n"
	"dp3 r2.w, r2, r2	\n" 
	"rsq r2.w, r2.w		\n" 
	"mul r2, r2, r2.w	\n" 

	"dp3 r3.x, r2, r0		\n"		// 1 ~ -1		노멀과 Half 내적 한다.

	"mul r3.y, r3.x, r3.x		\n"	// ^2
	"mul r3.x, r3.y, r3.y		\n"	// ^4
	"mul r3.x, r3.x, r3.x		\n"	// ^16
	"mul r3.x, r3.x, r3.y		\n"	// ^32

	//	"mul r2, r2, X		\n"		//	X 는 물체의 스페큘러 값
	"mul r2.xyzw, r3.x, c28.z	\n"		// 내적^32 나온것과 스페큘러 값을 곱한다.

	"add oD0, r1, r2	\n" //

	"mul oT0.xy, v7.xy, c29.xy	\n"
};
*/

//	Note : DxEffectDot3
//
DWORD	DxEffectDot3::dwDot3VertexShader[] = {
	0xfffe0100, 0x0004fffe, 0x454c4946, 0x33746f44,
	0x6873762e, 0x746f4400, 0x0002fffe, 0x454e494c,
	0x00000001, 0x0002fffe, 0x454e494c, 0x00000002,
	0x0002fffe, 0x454e494c, 0x00000003, 0x0002fffe,
	0x454e494c, 0x00000004, 0x0002fffe, 0x454e494c,
	0x00000004, 0x00000001, 0x800f0000, 0x90e40000,
	0x0002fffe, 0x454e494c, 0x00000005, 0x0002fffe,
	0x454e494c, 0x00000005, 0x00000005, 0x800f0001,
	0x90e40003, 0xa000001c, 0x0002fffe, 0x454e494c,
	0x00000006, 0x0002fffe, 0x454e494c, 0x00000006,
	0x00000002, 0x80070000, 0x80e40000, 0x80e40001,
	0x0002fffe, 0x454e494c, 0x00000007, 0x0002fffe,
	0x454e494c, 0x00000007, 0x00000014, 0xc00f0000,
	0x80e40000, 0xa0e40016, 0x0002fffe, 0x454e494c,
	0x00000008, 0x0002fffe, 0x454e494c, 0x00000009,
	0x0002fffe, 0x454e494c, 0x00000009, 0x00000017,
	0x800f0000, 0x90e40003, 0xa0e4000a, 0x0002fffe,
	0x454e494c, 0x0000000a, 0x0002fffe, 0x454e494c,
	0x0000000b, 0x0002fffe, 0x454e494c, 0x0000000b,
	0x00000008, 0x80080000, 0x80e40000, 0x80e40000,
	0x0002fffe, 0x454e494c, 0x0000000c, 0x0002fffe,
	0x454e494c, 0x0000000c, 0x00000007, 0x80080000,
	0x80ff0000, 0x0002fffe, 0x454e494c, 0x0000000d,
	0x0002fffe, 0x454e494c, 0x0000000d, 0x00000005,
	0x800f0000, 0x80e40000, 0x80ff0000, 0x0002fffe,
	0x454e494c, 0x0000000e, 0x0002fffe, 0x454e494c,
	0x0000000f, 0x0002fffe, 0x454e494c, 0x0000000f,
	0x00000015, 0x800f0001, 0x90e40000, 0xa0e4000a,
	0x0002fffe, 0x454e494c, 0x00000010, 0x0002fffe,
	0x454e494c, 0x00000010, 0x00000001, 0x80080001,
	0x90ff0000, 0x0002fffe, 0x454e494c, 0x00000011,
	0x0002fffe, 0x454e494c, 0x00000012, 0x0002fffe,
	0x454e494c, 0x00000012, 0x00000002, 0x800f0002,
	0xa0e40008, 0x81e40001, 0x0002fffe, 0x454e494c,
	0x00000013, 0x0002fffe, 0x454e494c, 0x00000014,
	0x0002fffe, 0x454e494c, 0x00000014, 0x00000008,
	0x80080002, 0x80e40002, 0x80e40002, 0x0002fffe,
	0x454e494c, 0x00000015, 0x0002fffe, 0x454e494c,
	0x00000015, 0x00000007, 0x80080002, 0x80ff0002,
	0x0002fffe, 0x454e494c, 0x00000016, 0x0002fffe,
	0x454e494c, 0x00000016, 0x00000005, 0x800f0002,
	0x80e40002, 0x80ff0002, 0x0002fffe, 0x454e494c,
	0x00000017, 0x0002fffe, 0x454e494c, 0x00000018,
	0x0002fffe, 0x454e494c, 0x00000019, 0x0002fffe,
	0x454e494c, 0x0000001a, 0x0002fffe, 0x454e494c,
	0x0000001a, 0x00000008, 0x80010004, 0x80e40000,
	0xa1e40000, 0x0002fffe, 0x454e494c, 0x0000001b,
	0x0002fffe, 0x454e494c, 0x0000001c, 0x0002fffe,
	0x454e494c, 0x0000001c, 0x00000005, 0x800f0005,
	0x80000004, 0xa0e40001, 0x0002fffe, 0x454e494c,
	0x0000001d, 0x0002fffe, 0x454e494c, 0x0000001d,
	0x00000005, 0x800f0001, 0x80e40005, 0xa0e4001a,
	0x0002fffe, 0x454e494c, 0x0000001e, 0x0002fffe,
	0x454e494c, 0x0000001e, 0x0000000b, 0x80070001,
	0x80a40001, 0xa000001c, 0x0002fffe, 0x454e494c,
	0x0000001f, 0x0002fffe, 0x454e494c, 0x0000001f,
	0x00000002, 0x80070001, 0x80a40001, 0xa0e4001b,
	0x0002fffe, 0x454e494c, 0x00000020, 0x0002fffe,
	0x454e494c, 0x00000021, 0x0002fffe, 0x454e494c,
	0x00000021, 0x00000008, 0x800f0002, 0x90e40000,
	0xa0e4000a, 0x0002fffe, 0x454e494c, 0x00000022,
	0x0002fffe, 0x454e494c, 0x00000023, 0x0002fffe,
	0x454e494c, 0x00000023, 0x00000002, 0x800f0002,
	0x81e40002, 0xa0e40008, 0x0002fffe, 0x454e494c,
	0x00000024, 0x0002fffe, 0x454e494c, 0x00000024,
	0x00000008, 0x80080002, 0x80e40002, 0x80e40002,
	0x0002fffe, 0x454e494c, 0x00000025, 0x0002fffe,
	0x454e494c, 0x00000025, 0x00000007, 0x80080002,
	0x80ff0002, 0x0002fffe, 0x454e494c, 0x00000026,
	0x0002fffe, 0x454e494c, 0x00000026, 0x00000005,
	0x800f0002, 0x80e40002, 0x80ff0002, 0x0002fffe,
	0x454e494c, 0x00000027, 0x0002fffe, 0x454e494c,
	0x00000028, 0x0002fffe, 0x454e494c, 0x00000029,
	0x0002fffe, 0x454e494c, 0x00000029, 0x00000002,
	0x800f0002, 0x80e40002, 0xa1e40000, 0x0002fffe,
	0x454e494c, 0x0000002a, 0x0002fffe, 0x454e494c,
	0x0000002a, 0x00000008, 0x80080002, 0x80e40002,
	0x80e40002, 0x0002fffe, 0x454e494c, 0x0000002b,
	0x0002fffe, 0x454e494c, 0x0000002b, 0x00000007,
	0x80080002, 0x80ff0002, 0x0002fffe, 0x454e494c,
	0x0000002c, 0x0002fffe, 0x454e494c, 0x0000002c,
	0x00000005, 0x800f0002, 0x80e40002, 0x80ff0002,
	0x0002fffe, 0x454e494c, 0x0000002d, 0x0002fffe,
	0x454e494c, 0x0000002e, 0x0002fffe, 0x454e494c,
	0x0000002e, 0x00000008, 0x80010003, 0x80e40002,
	0x80e40000, 0x0002fffe, 0x454e494c, 0x0000002f,
	0x0002fffe, 0x454e494c, 0x00000030, 0x0002fffe,
	0x454e494c, 0x00000030, 0x00000005, 0x80020003,
	0x80000003, 0x80000003, 0x0002fffe, 0x454e494c,
	0x00000031, 0x0002fffe, 0x454e494c, 0x00000031,
	0x00000005, 0x80010003, 0x80550003, 0x80550003,
	0x0002fffe, 0x454e494c, 0x00000032, 0x0002fffe,
	0x454e494c, 0x00000032, 0x00000005, 0x80010003,
	0x80000003, 0x80000003, 0x0002fffe, 0x454e494c,
	0x00000033, 0x0002fffe, 0x454e494c, 0x00000033,
	0x00000005, 0x80010003, 0x80000003, 0x80550003,
	0x0002fffe, 0x454e494c, 0x00000034, 0x0002fffe,
	0x454e494c, 0x00000035, 0x0002fffe, 0x454e494c,
	0x00000036, 0x0002fffe, 0x454e494c, 0x00000036,
	0x00000005, 0x800f0002, 0x80000003, 0xa0aa001c,
	0x0002fffe, 0x454e494c, 0x00000037, 0x0002fffe,
	0x454e494c, 0x00000038, 0x0002fffe, 0x454e494c,
	0x00000038, 0x00000002, 0xd00f0000, 0x80e40001,
	0x80e40002, 0x0002fffe, 0x454e494c, 0x00000039,
	0x0002fffe, 0x454e494c, 0x0000003a, 0x0002fffe,
	0x454e494c, 0x0000003a, 0x00000005, 0xe0030000,
	0x90540007, 0xa054001d, 0x0000ffff
};
