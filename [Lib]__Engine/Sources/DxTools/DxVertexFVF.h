#pragma once

#include <vector>

#define DIV_1_255	0.003922f

//float	g_1_RAND_MAX	= 1.f/RAND_MAX;	//0.000031f, 3.05185e-005
#define RANDOM_01		(((FLOAT)rand())*0.000031f)	// 0.f ~ 1.f
#define RANDOM_11		( (RANDOM_01*2.f)-1.f )			// -1.f ~ 1.f

typedef std::vector<DWORD>	VEC_DWORD;
typedef VEC_DWORD::iterator	VEC_DWORD_ITER;

struct VERTEX 
{ 
	D3DXVECTOR3 vPos; 
	D3DXVECTOR3 vNor; 
	D3DXVECTOR2 vTex;
	static const DWORD FVF = D3DFVF_XYZ|D3DFVF_NORMAL|D3DFVF_TEX1;
};
typedef VERTEX* PVERTEX;

struct POSTEX
{ 
	D3DXVECTOR3 vPos; 
	D3DXVECTOR2 vTex;
	static const DWORD FVF = D3DFVF_XYZ|D3DFVF_TEX1;
};
typedef POSTEX* PPOSTEX;

struct VERTEXCOLORTEX
{
	D3DXVECTOR3 vPos;
	DWORD		dwColor;
	D3DXVECTOR2 vTex;
	static const DWORD FVF = D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX1;
};
typedef VERTEXCOLORTEX* PVERTEXCOLORTEX;

struct VERTEXNORCOLORTEX
{
	D3DXVECTOR3 vPos;
	D3DXVECTOR3 vNor;
	DWORD		dwColor;
	D3DXVECTOR2 vTex;
	static const DWORD FVF = D3DFVF_XYZ|D3DFVF_NORMAL|D3DFVF_DIFFUSE|D3DFVF_TEX1;
};
typedef VERTEXNORCOLORTEX* PVERTEXNORCOLORTEX;

struct VERTEXCOLORTEX2
{ 
	D3DXVECTOR3 vPos;
	DWORD		dwColor;
	D3DXVECTOR2 vTex01;
	D3DXVECTOR2 vTex02;
	static const DWORD FVF = D3DFVF_XYZ|D3DFVF_DIFFUSE|D3DFVF_TEX2;
};
typedef VERTEXCOLORTEX2* PVERTEXCOLORTEX2;

struct VERTEXRHW
{
	D3DXVECTOR4 vPos;
	D3DXVECTOR2 vTex;
	static const DWORD FVF = D3DFVF_XYZRHW|D3DFVF_TEX1;
};
typedef VERTEXRHW* PVERTEXRHW;

struct VERTEXRHWTEX2
{
	D3DXVECTOR4 vPos;
	D3DXVECTOR2 vTex1;
	D3DXVECTOR2 vTex2;
	static const DWORD FVF = D3DFVF_XYZRHW|D3DFVF_TEX2;
};
typedef VERTEXRHWTEX2* PVERTEXRHWTEX2;

struct VERTEXCOLORRHW
{
	D3DXVECTOR4 vPos;
	D3DCOLOR	dwColor;
	D3DXVECTOR2 vTex;
	static const DWORD FVF = D3DFVF_XYZRHW|D3DFVF_DIFFUSE|D3DFVF_TEX1;
};
typedef VERTEXCOLORRHW* PVERTEXCOLORRHW;

struct VERTEXTEX2
{ 
	D3DXVECTOR3 vPos;
	D3DXVECTOR2 vTex01;
	D3DXVECTOR2 vTex02;
	float		fGarbage;	// 불필요 물건		// Data를 맞추기 위하여 넣음.
	static const DWORD FVF = D3DFVF_XYZ|D3DFVF_TEX3|D3DFVF_TEXCOORDSIZE1(2);
};
typedef VERTEXTEX2* PVERTEXTEX2;
