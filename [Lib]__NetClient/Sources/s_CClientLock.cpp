///////////////////////////////////////////////////////////////////////////////
// s_CClientLock.cpp
// class CLcok
//
///////////////////////////////////////////////////////////////////////////////

#include "pch.h"
#include "s_CClientLock.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

CClientLock::CClientLock()
{
	//////////////////////////////////////////////////////////////////////////////
	// Mutex Version
	m_Mutex = CreateMutex(NULL, false, NULL);

	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version		
	InitializeCriticalSection(&m_CriticalSection); 
}

CClientLock::~CClientLock()
{
	//////////////////////////////////////////////////////////////////////////////
	// Mutex Version
	if (m_Mutex != NULL)
	{
		CloseHandle(m_Mutex);
		m_Mutex = NULL;
	}

	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version
	DeleteCriticalSection(&m_CriticalSection);
}

void CClientLock::LockOn()
{	
	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version
	EnterCriticalSection(&m_CriticalSection);
}

void CClientLock::LockOnM()
{
	//////////////////////////////////////////////////////////////////////////////
	// Mutex Version
	WaitForSingleObject(m_Mutex, INFINITE);
}

void CClientLock::LockOff() 
{	
	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version
	LeaveCriticalSection(&m_CriticalSection);
}

void CClientLock::LockOffM()
{
	//////////////////////////////////////////////////////////////////////////////
	// Mutex Version
	ReleaseMutex(m_Mutex);
}