#include "pch.h"
#include "s_CLock.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

CLock::CLock()
{
	//////////////////////////////////////////////////////////////////////////////
	// Mutex Version
	//m_Mutex = CreateMutex(NULL, false, NULL);

	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version		
	InitializeCriticalSection(&m_CriticalSection); 
}

CLock::~CLock()
{
	//////////////////////////////////////////////////////////////////////////////
	// Mutex Version
	/*if (m_Mutex != NULL)
	{
		CloseHandle(m_Mutex);
		m_Mutex = NULL;
	}*/

	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version
	DeleteCriticalSection(&m_CriticalSection);
}

void CLock::LockOn()
{	
	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version
	EnterCriticalSection(&m_CriticalSection);
}

//void CLock::LockOnM()
//{
//	//////////////////////////////////////////////////////////////////////////////
//	// Mutex Version
//	WaitForSingleObject(m_Mutex, INFINITE);
//}

void CLock::LockOff() 
{	
	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version
	LeaveCriticalSection(&m_CriticalSection);
}

//void CLock::LockOffM()
//{
//	//////////////////////////////////////////////////////////////////////////////
//	// Mutex Version
//	ReleaseMutex(m_Mutex);
//}